Restructuring Business and In-Transit Orders by Vendor
Let's modify the data structure to group by vendor first, then show their associated SKUs. Here's how to update the filtering and mapping:

// Add this interface for the new structure
interface VendorWithSkus {
    vendorId: string;
    items: Array<{
        requestId: string;
        sku: SKU;
        poNumber: string | null;
        poStatus: string | null;
    }>;
}

// Update the business orders filtering
$: businessOrders = filteredPurchaseRequests.reduce<VendorWithSkus[]>((vendors, request) => {
    request.skus.forEach(sku => {
        const approvedVendor = sku.vendors[0];  // We know there's only one approved vendor
        if (approvedVendor.poStatus && BUSINESS_STATUSES.includes(approvedVendor.poStatus)) {
            // Find or create vendor group
            let vendorGroup = vendors.find(v => v.vendorId === approvedVendor.vendorId);
            if (!vendorGroup) {
                vendorGroup = {
                    vendorId: approvedVendor.vendorId,
                    items: []
                };
                vendors.push(vendorGroup);
            }
            
            // Add this SKU to vendor's items
            vendorGroup.items.push({
                requestId: request.id,
                sku,
                poNumber: approvedVendor.poNumber,
                poStatus: approvedVendor.poStatus
            });
        }
    });
    return vendors;
}, []);

// Update the in-transit orders filtering similarly
$: inTransitOrders = filteredPurchaseRequests.reduce<VendorWithSkus[]>((vendors, request) => {
    request.skus.forEach(sku => {
        const approvedVendor = sku.vendors[0];
        if (approvedVendor.poStatus && IN_TRANSIT_STATUSES.includes(approvedVendor.poStatus)) {
            let vendorGroup = vendors.find(v => v.vendorId === approvedVendor.vendorId);
            if (!vendorGroup) {
                vendorGroup = {
                    vendorId: approvedVendor.vendorId,
                    items: []
                };
                vendors.push(vendorGroup);
            }
            
            vendorGroup.items.push({
                requestId: request.id,
                sku,
                poNumber: approvedVendor.poNumber,
                poStatus: approvedVendor.poStatus
            });
        }
    });
    return vendors;
}, []);

Now update the template for both tabs to use this new structure:

<!-- Business Orders Tab Content -->
{#if currentTab === "business"}
    {#if businessOrders.length === 0}
        <div class="alert alert-info">
            There are no completed or cancelled business orders.
        </div>
    {:else}
        <div class="overflow-x-auto">
            <table class="table w-full">
                <thead>
                    <tr>
                        <th>Vendor ID</th>
                        <th>Request ID</th>
                        <th>SKU</th>
                        <th>PO Number</th>
                        <th>PO Status</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    {#each businessOrders as vendor (vendor.vendorId)}
                        {#each vendor.items as item, itemIndex (item.sku.sku)}
                            <tr>
                                {#if itemIndex === 0}
                                    <td class="font-bold" rowspan={vendor.items.length}>
                                        {vendor.vendorId}
                                    </td>
                                {/if}
                                <td class="font-mono text-xs">{item.requestId}</td>
                                <td>{item.sku.sku}</td>
                                <td>
                                    <input
                                        id={`po-num-business-${item.requestId}-${item.sku.sku}`}
                                        type="text"
                                        placeholder="Enter PO Number"
                                        class="input input-sm input-bordered w-full max-w-xs"
                                        value={item.poNumber || ""}
                                    />
                                </td>
                                <!-- ...rest of the columns similar to before... -->
                            </tr>
                        {/each}
                    {/each}
                </tbody>
            </table>
        </div>
    {/if}
{/if}

Use the same pattern for the in-transit tab. This new structure:

- Groups items by vendor first
- Shows all SKUs under each vendor
- Maintains all necessary data for updates
- Makes it easier to see all items per vendor
- Still allows individual SKU updates

You'll need to slightly modify the handlePoUpdate function to work with this new structure, but the basic functionality remains the same.